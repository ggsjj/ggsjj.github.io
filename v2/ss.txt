ss-lidev安装



cd ~ && curl -O https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz

tar -C /usr/local -xzf go1.13.5.linux-amd64.tar.gz

vim ~/.bash_profile

export GOPATH=$HOME/work
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

source ~/.bash_profile


go version


===============================================================

安装 v2ray-plugin

git clone https://github.com/shadowsocks/v2ray-plugin.git
cd v2ray-plugin
go mod download
go build
cp v2ray-plugin /usr/bin/v2ray-plugin

==============================================================
如安装失败 最后面2种

Debian 8 
Ubuntu 16.10 or higher
sudo apt update
sudo apt install shadowsocks-libev


For Debian 9 (Stretch)

sudo sh -c 'printf "deb http://deb.debian.org/debian stretch-backports main" > /etc/apt/sources.list.d/stretch-backports.list'
sudo apt update
sudo apt -t stretch-backports install shadowsocks-libev

CentOS 7安装依赖

yum install epel-release -y
yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y

su -c 'dnf copr enable librehat/shadowsocks'
su -c 'dnf update'
su -c 'dnf install shadowsocks-libev'

或者

yum install epel-release

sudo rpm -ivh https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo
sudo rpm -Uvh https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo

su -c 'yum update'
su -c 'yum install shadowsocks-libev'


配置文件

{
    "server":"0.0.0.0",
    "server_port":15334,
    "password":"qaz100200",
    "timeout":300,
    "user":"nobody",
    "method":"aes-256-gcm",
    "fast_open":false,
    "nameserver":"8.8.8.8",
    "mode":"tcp_and_udp",
    "plugin":"v2ray-plugin",
    "plugin_opts":"server;path=/api"
}

===============================================================

caddy

wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh && chmod +x caddy_install.sh && bash caddy_install.sh

vi /usr/local/caddy/Caddyfile

4a.vvppmm.xyz:443 {
    gzip
    tls 1123xhhh@gmail.com
    timeouts none
    proxy /api localhost:15334 {
        websocket
        header_upstream -Origin
    }
    proxy / https://data.at {
        except /api
    }
}

======================================



Ubuntu 安装

1、准备编译环境

sudo apt install --no-install-recommends build-essential autoconf libtool \
         libssl-dev gawk debhelper dh-systemd init-system-helpers pkg-config asciidoc \
         xmlto apg libpcre3-dev zlib1g-dev libev-dev libudns-dev libsodium-dev \
         libmbedtls-dev libc-ares-dev automake
2、获取shadowsocks-libev源码, 并安装

sudo apt install git
git clone https://github.com/shadowsocks/shadowsocks-libev.git
cd shadowsocks-libev
git submodule update --init
./autogen.sh && ./configure --disable-documentation && make
sudo make install
3、 创建配置文件：

sudo mkdir /etc/shadowsocks-libev
sudo vi /etc/shadowsocks-libev/config.json
复制粘贴如下内容（注意修改密码“password”）：

{
     "server":"0.0.0.0",
     "server_port":8388,
     "local_port":1080,
     "password":"password",
     "timeout":600,
     "method":"aes-256-cfb" ,
     "fast_open": false
 }
4、创建Shadowsocks-libev.service配置文件

sudo vi /etc/systemd/system/shadowsocks-libev.service
复制粘贴：

[Unit]
Description=Shadowsocks-libev Server
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks-libev/config.json -u
Restart=on-abort

[Install]
WantedBy=multi-user.target
5、启动Shadowsocks：

sudo systemctl start shadowsocks-libev
6、设置开机启动

sudo systemctl enable shadowsocks-libev

至此， Shadowsocks-libev服务器端的基本配置已经全部完成了！


==================================


CentOS 7

yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y
CentOS 8

yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel -y
2、获取shadowsocks-libev源码, 并安装
yum install git
git clone https://github.com/shadowsocks/shadowsocks-libev.git
cd shadowsocks-libev
git submodule update --init
./autogen.sh && ./configure --disable-documentation && make
sudo make install
如果出现 error: The Sodium crypto library libraries not found 错误，安装 libsodium

如果出现 error: mbed TLS libraries not found. 错误，安装 mbedtls

3、 创建配置文件
sudo mkdir /etc/shadowsocks-libev
sudo vi /etc/shadowsocks-libev/config.json
复制粘贴如下内容（注意修改密码“password”）：

{
     "server":"0.0.0.0",
     "server_port":8388,
     "local_port":1080,
     "password":"password",
     "timeout":600,
     "method":"aes-256-cfb" ,
     "fast_open": false
 }
4、创建Shadowsocks-libev.service配置文件
sudo vi /etc/systemd/system/shadowsocks-libev.service
复制粘贴：

[Unit]
Description=Shadowsocks-libev Server
Documentation=https://shadowsocks.org/en/
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks-libev/config.json -u
Restart=on-abort

[Install]
WantedBy=multi-user.target
5、启动 Shadowsocks-libev 服务
sudo systemctl start shadowsocks-libev
6、设置开机启动
sudo systemctl enable shadowsocks-libev
至此， Shadowsocks-libev服务器端的基本配置已经全部完成了！

设置防火墙开放端口
开放 tcp/udp 8388 端口

firewall-cmd --zone=public --add-port=8388/tcp --permanent
firewall-cmd --zone=public --add-port=8388/udp --permanent
重新载入防火墙配置，使规则生效

sudo systemctl restart firewalld








===================================


优化 CentOS 7 或者 Ubuntu 16.04 以上版本下的 shadowsocks-libev 网络速度，让 shadowsocks-libev 轻松跑满宽带。



一、优化吞吐量
1、新建配置文件：

sudo vi /etc/sysctl.d/local.conf
复制粘贴：

#max open files
fs.file-max = 51200
#max read buffer
net.core.rmem_max = 67108864
#max write buffer
net.core.wmem_max = 67108864
#default read buffer
net.core.rmem_default = 65536
#default write buffer
net.core.wmem_default = 65536
#max processor input queue
net.core.netdev_max_backlog = 4096
#max backlog
net.core.somaxconn = 4096
#resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
#reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
#turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
#short FIN timeout
net.ipv4.tcp_fin_timeout = 30
#short keepalive time
net.ipv4.tcp_keepalive_time = 1200
#outbound port range
net.ipv4.ip_local_port_range = 10000 65000
#max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
#max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
#turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
#TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
#TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
#turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1
#不开BBr删除去
net.ipv4.tcp_congestion_control = bbr


2、运行：

sysctl --system
3、编辑配置文件limits.conf﻿

sudo vi /etc/security/limits.conf
在文件结尾添加两行：

* soft nofile 51200
* hard nofile 51200
4、编辑 shadowsocks-libev 服务

# 服务配置文件名称视具体而定
sudo vi /etc/systemd/system/shadowsocks-libev.service
在[Service]之后加入 ExecStartPre=/bin/sh -c ‘ulimit -n 51200’

[Unit]
Description=Shadowsocks-libev Server
After=network.target

[Service]
Type=simple
# 服务配置可能有所不一样，视实际而定
# 在这里加入 ExecStartPre=/bin/sh -c 'ulimit -n 51200'
ExecStartPre=/bin/sh -c 'ulimit -n 51200'
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks-libev/config.json -u
Restart=on-abort

[Install]
WantedBy=multi-user.target
5、重新加载 shadowsocks-libev 服务配置

sudo systemctl daemon-reload
6、重启 Shadowsocks-libev 服务

sudo systemctl restart shadowsocks-libev
二、开启TCP Fast Open
TCP Fast Open可以降低Shadowsocks服务器和客户端的延迟。实际上在上一步已经开启了TCP Fast Open，现在只需要在Shadowsocks配置中启用TCP Fast Open。
1、编辑config.json：

sudo vi /etc/shadowsocks-libev/config.json
将 fast_open 的值由 false 修改为 true

{
     "server":"0.0.0.0",
     "server_port":8388,
     "local_port":1080,
     "password":"password",
     "timeout":600,
     "method":"aes-256-cfb",
     /*这里设置 fast_open：true，如果没有则加入*/
     "fast_open": true
 } 
2、重启 shadowsocks-libev 服务：

sudo systemctl restart shadowsocks-libev
